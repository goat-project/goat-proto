syntax = "proto3";

package goat_grpc;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";

message ClientIdentification {
    string identifier = 1;
}

message Confirmation {
    bool     confirmed = 1;
    // filled only if confirmed == false, empty string otherwise
    string   msg       = 2;
}

message VmRecord {
    string                    vm_uuid                 = 1;
    string                    site_name               = 2;
    string                    cloud_compute_service   = 3;
    string                    machine_name            = 4;
    string                    local_user_id           = 5;
    string                    local_group_id          = 6;
    string                    global_user_name        = 7;
    string                    fqan                    = 8;
    string                    status                  = 9;
    google.protobuf.Timestamp start_time              = 10;
    google.protobuf.Timestamp end_time                = 11;
    string                    suspend_duration        = 12;
    google.protobuf.Duration  wall_time               = 13;
    google.protobuf.Duration  cpu_duration            = 14;
    uint32                    cpu_count               = 15;
    string                    network_type            = 16;
    uint64                    network_inbound         = 17;
    uint64                    network_outbound        = 18;
    uint64                    public_ip_count         = 19;
    uint64                    memory                  = 20;
    uint64                    disk                    = 21;
    string                    benchmark_type          = 22;
    float                     benchmark               = 23;
    string                    storage_record_id       = 24;
    string                    image_id                = 25;
    string                    cloud_type              = 26;
}

message IpRecord {
}

message StorageRecord {
}

message AccountingDataChunk {
    repeated VmRecord vms          = 1;
    repeated IpRecord ips          = 2;
    repeated StorageRecord storage = 3;
}

service AccountingService {
    rpc Identify(ClientIdentification) returns (Confirmation);
    rpc Process(AccountingDataChunk) returns (google.protobuf.Empty);
}
